{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Satyam\\\\Desktop\\\\langs\\\\LangsFree-project\\\\Satyam\\\\langsfree\\\\src\\\\components\\\\Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../Form.css';\nimport axios from 'axios';\nconst restUrl = \"http://localhost/moglie-api/\";\n\nconst Register = () => {\n  _s();\n\n  const [error, setError] = useState({\n    error: []\n  });\n  const [users, setUsers] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    active: \"\"\n  });\n\n  const showValidationErr = (elm, msg) => {\n    setError(prevState => ({\n      error: [...prevState.error, {\n        elm,\n        msg\n      }]\n    }));\n  };\n\n  const clearValidationErr = elm => {\n    setError(prevState => {\n      let newArr = [];\n\n      for (let err of prevState.error) {\n        if (elm !== err.elm) {\n          newArr.push(err);\n        }\n      }\n\n      return newArr;\n    });\n  };\n\n  const onnameChange = e => {\n    setUsers({ ...users,\n      name: e.target.value\n    }); // clearValidationErr(\"name\");\n  };\n\n  const onEmailChange = e => {\n    setUsers({ ...users,\n      email: e.target.value\n    }); // clearValidationErr(\"email\");\n  };\n\n  const onPasswordChange = e => {\n    setUsers({ ...users,\n      password: e.target.value\n    }); // clearValidationErr(\"password\");\n  };\n\n  const submitRegister = async e => {\n    if (users.name === \"\") {\n      showValidationErr(\"name\", \"name cannot be empty\");\n    }\n\n    if (users.email === \"\") {\n      showValidationErr(\"email\", \"Email cannot be empty\");\n    }\n\n    if (users.password === \"\") {\n      showValidationErr(\"password\", \"Password cannot be empty\");\n    }\n\n    if (users.name !== \"\" && users.email !== \"\" && users.password !== \"\") {\n      const {\n        data,\n        status\n      } = await axios.post(restUrl + 'create-user-api.php', {\n        name: users.name,\n        email: users.email,\n        password: users.password,\n        active: 1\n      });\n\n      if (status === 200) {\n        setUsers(data); // setUsers({ name: \"\", email: \"\", password: \"\" })\n      }\n    } else {\n      setError(\"Fields are required\");\n      return;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"inner-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          method: \"POST\",\n          name: \"name\",\n          className: \"login-input\",\n          placeholder: \"name\",\n          onChange: onnameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          method: \"POST\",\n          name: \"email\",\n          className: \"login-input\",\n          placeholder: \"Email\",\n          onChange: onEmailChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          method: \"POST\",\n          name: \"password\",\n          className: \"login-input\",\n          placeholder: \"Password\",\n          onChange: onPasswordChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"login-btn\",\n        onClick: submitRegister,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Register, \"FpHWyFoWVCGkaCQ0h9p/X1xnmL4=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["C:/Users/Satyam/Desktop/langs/LangsFree-project/Satyam/langsfree/src/components/Register.js"],"names":["React","useState","useEffect","axios","restUrl","Register","error","setError","users","setUsers","name","email","password","active","showValidationErr","elm","msg","prevState","clearValidationErr","newArr","err","push","onnameChange","e","target","value","onEmailChange","onPasswordChange","submitRegister","data","status","post"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../Form.css';\r\nimport axios from 'axios';\r\n\r\nconst restUrl = \"http://localhost/moglie-api/\"\r\n\r\nconst Register = () => {\r\n\r\n  const [error, setError] = useState({ error: [] });\r\n  const [users, setUsers] = useState({ name: \"\", email: \"\", password: \"\", active: \"\" })\r\n\r\n  const showValidationErr = (elm, msg) => {\r\n    setError((prevState) => ({ error: [...prevState.error, { elm, msg }] }))\r\n\r\n  }\r\n\r\n  const clearValidationErr = (elm) => {\r\n    setError((prevState) => {\r\n      let newArr = [];\r\n      for (let err of prevState.error) {\r\n        if (elm !== err.elm) {\r\n          newArr.push(err);\r\n        }\r\n      }\r\n      return newArr;\r\n    });\r\n  }\r\n\r\n  const onnameChange = (e) => {\r\n    setUsers({ ...users, name: e.target.value })\r\n    // clearValidationErr(\"name\");\r\n  }\r\n  const onEmailChange = (e) => {\r\n    setUsers({ ...users, email: e.target.value })\r\n    // clearValidationErr(\"email\");\r\n  }\r\n  const onPasswordChange = (e) => {\r\n    setUsers({ ...users, password: e.target.value })\r\n    // clearValidationErr(\"password\");\r\n  }\r\n\r\n\r\n  const submitRegister = async (e) => {\r\n\r\n    if (users.name === \"\") {\r\n      showValidationErr(\"name\", \"name cannot be empty\")\r\n    } if (users.email === \"\") {\r\n      showValidationErr(\"email\", \"Email cannot be empty\")\r\n    } if (users.password === \"\") {\r\n      showValidationErr(\"password\", \"Password cannot be empty\")\r\n    }\r\n\r\n    if (users.name !== \"\" && users.email !== \"\" && users.password !== \"\") {\r\n      const { data, status } = await axios.post(restUrl + 'create-user-api.php', {\r\n        name: users.name,\r\n        email: users.email,\r\n        password: users.password,\r\n        active: 1\r\n      })\r\n      if (status === 200) {\r\n        setUsers(data)\r\n        // setUsers({ name: \"\", email: \"\", password: \"\" })\r\n      }\r\n\r\n    } else {\r\n      setError(\"Fields are required\");\r\n      return;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"inner-container\">\r\n      <div className=\"header\">\r\n        Register\r\n        </div>\r\n      <div className=\"box\">\r\n        <div className=\"input-group\">\r\n          <label htmlFor=\"name\">name</label>\r\n          <input\r\n            type=\"text\"\r\n            method=\"POST\"\r\n            name=\"name\"\r\n            className=\"login-input\"\r\n            placeholder=\"name\"\r\n            onChange={onnameChange}\r\n          />\r\n          {/* <small className=\"danger-error\">{nameErr ? nameErr : \"\"}</small> */}\r\n        </div>\r\n\r\n        <div className=\"input-group\">\r\n          <label htmlFor=\"email\">Email</label>\r\n          <input type=\"text\"\r\n            method=\"POST\"\r\n            name=\"email\"\r\n            className=\"login-input\"\r\n            placeholder=\"Email\"\r\n            onChange={onEmailChange}\r\n          />\r\n          {/* <small className=\"danger-error\">{emailErr ? emailErr : \"\"}</small> */}\r\n        </div>\r\n\r\n        <div className=\"input-group\">\r\n          <label htmlFor=\"password\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            method=\"POST\"\r\n            name=\"password\"\r\n            className=\"login-input\"\r\n            placeholder=\"Password\"\r\n            onChange={onPasswordChange}\r\n          />\r\n          {/* <small className=\"danger-error\">{passwordErr ? passwordErr : \"\"}</small> */}\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"login-btn\"\r\n          onClick={submitRegister\r\n          }>Register\r\n        </button>\r\n      </div>\r\n      {/* {error && (\r\n        <Alert severity=\"error\" onClick={() => setError(null)}>\r\n          {props.error || error}\r\n        </Alert>\r\n      )} */}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register;"]},"metadata":{},"sourceType":"module"}