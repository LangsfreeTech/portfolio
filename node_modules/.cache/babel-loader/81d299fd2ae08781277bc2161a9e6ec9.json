{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Satyam\\\\Desktop\\\\langs\\\\LangsFree-project\\\\satyam\\\\langsfree\\\\src\\\\components\\\\Slider.js\",\n    _s = $RefreshSig$();\n\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\nimport React, { useState, useEffect, useRef } from 'react';\nimport { css, jsx } from '@emotion/core';\nimport SliderContent from './SliderContent';\nimport Slide from './Slide'; // import Arrow from './Arrow'\n\nimport Dots from './Dots';\n/**\r\n * @function Slider\r\n */\n\nconst Slider = props => {\n  _s();\n\n  const getWidth = () => window.innerWidth;\n\n  const [state, setState] = useState({\n    activeIndex: 0,\n    translate: 0,\n    transition: 0.45\n  });\n  const {\n    translate,\n    transition,\n    activeIndex\n  } = state;\n\n  const nextSlide = () => {\n    if (activeIndex === props.slides.length - 1) {\n      return setState({ ...state,\n        translate: 0,\n        activeIndex: 0\n      });\n    }\n\n    setState({ ...state,\n      activeIndex: activeIndex + 1,\n      translate: (activeIndex + 1) * getWidth()\n    });\n  };\n\n  const prevSlide = () => {\n    if (activeIndex === 0) {\n      return setState({ ...state,\n        translate: (props.slides.length - 1) * getWidth(),\n        activeIndex: props.slides.length - 1\n      });\n    }\n\n    setState({ ...state,\n      activeIndex: activeIndex - 1,\n      translate: (activeIndex - 1) * getWidth()\n    });\n  };\n\n  return jsx(\"div\", {\n    css: SliderCSS,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    },\n    __self: this\n  }, jsx(SliderContent, {\n    translate: translate,\n    transition: transition,\n    width: getWidth() * props.slides.length,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    },\n    __self: this\n  }, props.slides.map((slide, i) => jsx(Slide, {\n    key: slide + i,\n    content: slide,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    },\n    __self: this\n  }))), jsx(Dots, {\n    slides: props.slides,\n    activeIndex: activeIndex,\n    handleClick: nextSlide,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    },\n    __self: this\n  }));\n};\n\n_s(Slider, \"VScFGd9die/3ip54KGiKRRnA0VM=\");\n\n_c = Slider;\nconst SliderCSS = css`\n  position: relative;\n  height: 100vh;\n  width: 100%;\n  margin: 0 auto;\n  overflow: hidden;\n`;\nexport default Slider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Slider\");","map":{"version":3,"sources":["C:/Users/Satyam/Desktop/langs/LangsFree-project/satyam/langsfree/src/components/Slider.js"],"names":["React","useState","useEffect","useRef","css","jsx","SliderContent","Slide","Dots","Slider","props","getWidth","window","innerWidth","state","setState","activeIndex","translate","transition","nextSlide","slides","length","prevSlide","SliderCSS","map","slide","i"],"mappings":"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","sourcesContent":["/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport React, { useState, useEffect, useRef } from 'react'\r\nimport { css, jsx } from '@emotion/core'\r\nimport SliderContent from './SliderContent'\r\nimport Slide from './Slide'\r\n// import Arrow from './Arrow'\r\nimport Dots from './Dots'\r\n\r\n\r\n/**\r\n * @function Slider\r\n */\r\nconst Slider = props => {\r\n  const getWidth = () => window.innerWidth\r\n\r\n  const [state, setState] = useState({\r\n    activeIndex: 0,\r\n    translate: 0,\r\n    transition: 0.45\r\n  })\r\n\r\n  const { translate, transition, activeIndex } = state\r\n\r\n  const nextSlide = () => {\r\n    if (activeIndex === props.slides.length - 1) {\r\n      return setState({\r\n        ...state,\r\n        translate: 0,\r\n        activeIndex: 0\r\n      })\r\n    }\r\n\r\n    setState({\r\n      ...state,\r\n      activeIndex: activeIndex + 1,\r\n      translate: (activeIndex + 1) * getWidth()\r\n    })\r\n  }\r\n\r\n  const prevSlide = () => {\r\n    if (activeIndex === 0) {\r\n      return setState({\r\n        ...state,\r\n        translate: (props.slides.length - 1) * getWidth(),\r\n        activeIndex: props.slides.length - 1\r\n      })\r\n    }\r\n\r\n    setState({\r\n      ...state,\r\n      activeIndex: activeIndex - 1,\r\n      translate: (activeIndex - 1) * getWidth()\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div css={SliderCSS}>\r\n      <SliderContent\r\n        translate={translate}\r\n        transition={transition}\r\n        width={getWidth() * props.slides.length}\r\n      >\r\n\r\n        {props.slides.map((slide, i) => (\r\n          <Slide key={slide + i} content={slide} />\r\n        ))}\r\n      </SliderContent >\r\n\r\n      {/* <Arrow direction=\"left\" handleClick={prevSlide} />\r\n      <Arrow direction=\"right\" handleClick={nextSlide} /> */}\r\n\r\n      <Dots slides={props.slides} activeIndex={activeIndex} handleClick={nextSlide} />\r\n      {/* <Dots slides={props.slides} activeIndex={activeIndex} handleClick={prevSlide} /> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst SliderCSS = css`\r\n  position: relative;\r\n  height: 100vh;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  overflow: hidden;\r\n`\r\nexport default Slider"]},"metadata":{},"sourceType":"module"}